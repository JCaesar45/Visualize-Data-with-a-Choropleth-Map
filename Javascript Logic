const educationDataUrl =
  "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/for_user_education.json";
const countiesDataUrl =
  "https://cdn.freecodecamp.org/testable-projects-fcc/data/choropleth_map/counties.json";

// Load the data
Promise.all([d3.json(educationDataUrl), d3.json(countiesDataUrl)]).then(
  (data) => {
    const educationData = data[0];
    const countiesData = data[1];

    // Set up SVG parameters
    const svg = d3.select("#map");
    const width = +svg.attr("width");
    const height = +svg.attr("height");

    const path = d3.geoPath();
    const colorScale = d3
      .scaleQuantize()
      .domain([
        d3.min(educationData, (d) => d.bachelorsOrHigher),
        d3.max(educationData, (d) => d.bachelorsOrHigher)
      ])
      .range(d3.schemeBlues[4]);

    // Create tooltip
    const tooltip = d3.select("#tooltip");

    // Draw the map
    svg
      .append("g")
      .selectAll("path")
      .data(
        topojson.feature(countiesData, countiesData.objects.counties).features
      )
      .enter()
      .append("path")
      .attr("class", "county")
      .attr("d", path)
      .attr("fill", (d) =>
        colorScale(educationData.find((e) => e.fips === d.id).bachelorsOrHigher)
      )
      .attr("data-fips", (d) => d.id)
      .attr(
        "data-education",
        (d) => educationData.find((e) => e.fips === d.id).bachelorsOrHigher
      )
      .on("mouseover", function (event, d) {
        tooltip.transition().duration(200).style("opacity", 0.9);
        tooltip
          .html(
            educationData.find((e) => e.fips === d.id).area +
              ": " +
              educationData.find((e) => e.fips === d.id).bachelorsOrHigher +
              "%"
          )
          .attr(
            "data-education",
            educationData.find((e) => e.fips === d.id).bachelorsOrHigher
          )
          .style("left", event.pageX + 5 + "px")
          .style("top", event.pageY - 28 + "px");
      })
      .on("mouseout", function () {
        tooltip.transition().duration(200).style("opacity", 0);
      });

    // Create a legend
    const legend = d3
      .select("#legend")
      .selectAll(".legend-item")
      .data(colorScale.range())
      .enter()
      .append("g")
      .attr("class", "legend-item")
      .attr("transform", (d, i) => `translate(0, ${i * 20})`);

    legend
      .append("rect")
      .attr("width", 20)
      .attr("height", 20)
      .style("fill", (d) => d);

    legend
      .append("text")
      .attr("x", 30)
      .attr("y", 10)
      .attr("dy", ".35em")
      .text((d) => {
        const extent = colorScale.invertExtent(d);
        return Math.round(extent[0]) + "% - " + Math.round(extent[1]) + "%";
      });
  }
);
